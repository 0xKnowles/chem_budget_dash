"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { FileText, Loader2 } from "lucide-react"
import { useDashboard } from "@/contexts/DashboardContext"
import jsPDF from "jspdf"
import autoTable from "jspdf-autotable"
import { useToast } from "@/components/ui/use-toast"

export function GenerateReport() {
  const [isGenerating, setIsGenerating] = useState(false)
  const { toast } = useToast()

  const { applications, totalUsage, mostUsedChemicals, monthlySpending, selectedMonth, averagePricePerBay } =
    useDashboard()

  const latestMonthData = monthlySpending[0] || { month: "No Data", spent: 0, budget: 0 }

  const generatePDF = async () => {
    try {
      setIsGenerating(true)

      // Create PDF document
      const doc = new jsPDF()

      // Title
      doc.setFontSize(20)
      doc.text("Spray Application Report", 105, 15, { align: "center" })

      // Date and Month
      doc.setFontSize(12)
      doc.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 25)
      doc.text(`Month: ${selectedMonth || "All"}`, 20, 32)

      // Key Metrics
      doc.setFontSize(16)
      doc.text("Key Metrics", 20, 45)

      doc.setFontSize(11)
      const metrics = [
        [
          `Total Applications: ${totalUsage.sprayCount + totalUsage.fogCount}`,
          `Sprays: ${totalUsage.sprayCount}, Fogs: ${totalUsage.fogCount}`,
        ],
        [`Total Bays Treated: ${totalUsage.totalBays}`, `Full Range Applications: ${totalUsage.fullRangeApplications}`],
        [
          `Monthly Budget: $${latestMonthData.budget.toLocaleString()}`,
          `Spent This Month: $${latestMonthData.spent.toLocaleString()}`,
        ],
        [`Average Price per Bay: $${averagePricePerBay.toFixed(2)}`, ""],
      ]

      autoTable(doc, {
        startY: 50,
        head: [],
        body: metrics,
        theme: "plain",
        styles: { fontSize: 10 },
        columnStyles: { 0: { cellWidth: 90 }, 1: { cellWidth: 90 } },
      })

      // Most Used Chemicals
      doc.setFontSize(16)
      doc.text("Most Used Chemicals", 20, doc.lastAutoTable.finalY + 15)

      const chemicalsData = mostUsedChemicals.slice(0, 3).map((chem) => [chem.chemical, chem.count.toString()])

      autoTable(doc, {
        startY: doc.lastAutoTable.finalY + 20,
        head: [["Chemical", "Usage Count"]],
        body: chemicalsData,
        theme: "striped",
        headStyles: { fillColor: [41, 128, 185] },
        styles: { fontSize: 10 },
      })

      // Recent Applications
      doc.setFontSize(16)
      doc.text("Recent Applications", 20, doc.lastAutoTable.finalY + 15)

      const applicationsData = applications
        .slice(0, 5)
        .map((app) => [
          app.date.formatted,
          [...app.sprayChemicals, ...app.fogChemicals].filter(Boolean).join(", "),
          app.sprayChemicals.some(Boolean) && app.fogChemicals.some(Boolean)
            ? "Spray & Fog"
            : app.sprayChemicals.some(Boolean)
              ? "Spray"
              : "Fog",
          app.bays.count.toString(),
          `$${app.price.toFixed(2)}`,
        ])

      autoTable(doc, {
        startY: doc.lastAutoTable.finalY + 20,
        head: [["Date", "Chemicals", "Method", "Bays", "Price"]],
        body: applicationsData,
        theme: "striped",
        headStyles: { fillColor: [41, 128, 185] },
        styles: { fontSize: 10 },
      })

      // Footer
      const pageCount = doc.internal.getNumberOfPages()
      doc.setFontSize(8)
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i)
        doc.text(
          `Generated by Spray Application Dashboard â€¢ ${new Date().toLocaleString()}`,
          doc.internal.pageSize.width / 2,
          doc.internal.pageSize.height - 10,
          { align: "center" },
        )
      }

      // Save the PDF
      doc.save(`spray-report-${selectedMonth?.toLowerCase() || "all"}.pdf`)

      toast({
        title: "Report Generated",
        description: "Your PDF report has been downloaded successfully.",
      })
    } catch (error) {
      console.error("Error generating PDF:", error)
      toast({
        title: "Error",
        description: "Failed to generate the PDF report. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsGenerating(false)
    }
  }

  return (
    <Button
      variant="outline"
      size="lg"
      className="bg-white text-gray-700 border-gray-300 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-300"
      onClick={generatePDF}
      disabled={isGenerating}
    >
      {isGenerating ? (
        <Loader2 className="h-4 w-4 mr-2 animate-spin text-gray-600" />
      ) : (
        <FileText className="h-4 w-4 mr-2 text-blue-600" />
      )}
      Generate Report
    </Button>
  )
}

